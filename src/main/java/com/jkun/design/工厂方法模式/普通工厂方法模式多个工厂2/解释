在普通工厂方法模式中，若抽象产品类的某个具体实例逻辑不一，当实现类多起来时，则会导致工厂方法冗长。
解决方法是根据产品实现类的数量，拆分多个工厂。
例如每个实现类对应一个工厂
缺点：需要维护产品类和工厂的关系，当新增产品时，需要新增工厂
优化：一般会用一个协调类封装多个工厂方法，Client调用。
这种模式用得比较多